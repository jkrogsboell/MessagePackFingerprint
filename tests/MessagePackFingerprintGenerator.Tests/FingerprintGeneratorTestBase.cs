using System.Text;
using System.Threading.Tasks;
using MessagePack;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;

namespace MessagePackFingerprintGenerator.Tests;

public class FingerprintGeneratorTestBase
{
    private const string IsExternalInitStub 
        = """
          namespace System.Runtime.CompilerServices
          {
              internal static class IsExternalInit { }
          }
          """;
    
    private const string RequiredMemberStub =
        """
        namespace System.Runtime.CompilerServices
        {
            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
            internal sealed class RequiredMemberAttribute : Attribute {}
        
            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false)]
            internal sealed class CompilerFeatureRequiredAttribute : Attribute 
            {
                public CompilerFeatureRequiredAttribute(string featureName) {}
            }
        }
        """;

    protected async Task TestFingerprintGeneratorAsync(string source, string expectedGeneratedSource)
    {
        expectedGeneratedSource =
            """
            // <auto-generated />
            #nullable enable
            
            namespace TestProject.GeneratedFingerprints;
            
            public static class MessagePackFingerprints
            {
                private static string ShaHelper(string fingerprint)
                {
                    using var sha = System.Security.Cryptography.SHA256.Create();
                    var bytes = sha.ComputeHash(System.Text.Encoding.UTF8.GetBytes(fingerprint));
                
                    var sb = new System.Text.StringBuilder(bytes.Length * 2);
                    foreach (var b in bytes)
                        sb.AppendFormat("{0:X2}", b); // Uppercase
                    return sb.ToString();
                }
            """ + "\r\n"+ expectedGeneratedSource + "\r\n}\r\n";
        
        var test = new CSharpSourceGeneratorTest<MessagePackFingerprintGenerator, DefaultVerifier>
        {
            TestState =
            {
                Sources = { IsExternalInitStub, RequiredMemberStub, source },
                AdditionalReferences =
                {
                    MetadataReference.CreateFromFile(typeof(MessagePackObjectAttribute).Assembly.Location)
                },
                GeneratedSources =
                {
                    (typeof(MessagePackFingerprintGenerator), 
                        "MessagePackFingerprints.generated.cs", 
                        SourceText.From(expectedGeneratedSource, Encoding.UTF8)
                    )
                }
            },
        };
        
        /*var runResult = await test.TestState.();

        var diagnostics = runResult.Diagnostics;
        foreach (var diag in diagnostics)
        {
            Console.WriteLine($"Diagnostic: {diag.Id} - {diag.GetMessage()}");
        }*/
        
        await test.RunAsync();
    }
}