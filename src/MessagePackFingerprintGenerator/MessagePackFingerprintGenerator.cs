using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace MessagePackFingerprintGenerator;

[Generator]
public class MessagePackFingerprintGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var configProvider = GeneratorPipelines.ConfigProvider(context);

        var messagePackTypes = GeneratorPipelines.GetMessagePackTypes(context);

        var assemblyNameProvider =
            context.CompilationProvider.Select((compilation, _) => compilation.AssemblyName ?? "UnknownAssembly");

        var combined = assemblyNameProvider
            .Combine(messagePackTypes)
            .Combine(configProvider);

        context.RegisterSourceOutput(
            combined,
            (spc, data) =>
            {
                var ((assemblyName, types), referencedWithGenerator) = data;
                GenerateFingerprints(spc, assemblyName, types, referencedWithGenerator);
            });
    }

    private static void GenerateFingerprints(
        SourceProductionContext context,
        string assemblyName,
        IEnumerable<INamedTypeSymbol> types,
        HashSet<string> referencedWithGenerator)
    {
        referencedWithGenerator.Add(assemblyName);

        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {assemblyName}.GeneratedFingerprints;");
        sb.AppendLine("");
        sb.AppendLine("public static class MessagePackFingerprints");
        sb.AppendLine("{");
        sb.AppendLine("""
                          private static string ShaHelper(string fingerprint)
                          {
                              using var sha = System.Security.Cryptography.SHA256.Create();
                              var bytes = sha.ComputeHash(System.Text.Encoding.UTF8.GetBytes(fingerprint));
                          
                              var sb = new System.Text.StringBuilder(bytes.Length * 2);
                              foreach (var b in bytes)
                                  sb.AppendFormat("{0:X2}", b); // Uppercase
                              return sb.ToString();
                          }
                      """);

        foreach (var type in types)
        {
            // skip types from other assemblies that has the generator installed
            if (assemblyName != type.ContainingAssembly.Identity.Name &&
                referencedWithGenerator.Contains(type.ContainingAssembly.Identity.Name))
                continue;

            var fingerprint = FingerprintHelper.ComputeFingerprint(type, referencedWithGenerator);
            var typeName = type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", "")
                .Replace(".", "_");
            sb.AppendLine($"    public static readonly string {typeName} = ShaHelper(");
            sb.AppendLine("$\"\"\"");
            sb.Append(fingerprint);
            sb.AppendLine("\"\"\");");
        }

        sb.AppendLine("}");

        context.AddSource("MessagePackFingerprints.generated.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}